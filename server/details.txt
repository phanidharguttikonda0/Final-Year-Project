Application back-end design :

https://localhost:xxxx/sign-in  [Studio Sync] or [Core Create]

https://localhost:xxxx/sign-up [Studio Setup] or [Core Connect] the word we are going to use for the sign-up

https://localhost:xxxx/get-history

https://localhost:xxxx/get-history-item  [returns the item of the history clicked]

https://localhost:xxxx/post-history  [sends the prompt and the out-put of the ai model ] doesn’t sends the pdf file

each document should contain

[
    {

        email ,

        password,

        mobile,

        chats-history: [

            chat-1: [ fileReferenceId: "" , conversation: [ { prompt: “”, model-used: "", out-put: “”} , ....     ]  ]

            ....

            ],

    }
]

we are going to use the mongo db for this

For a Chat we are going to allow only upload one SRS document and the we can allow multiple prompts


the packages used are : npm install express mongoose cors dotenv nodemon

for front-end :
    ->  npm install -D tailwindcss postcss autoprefixer   [ the hiphen D means we are going to use them only in development stage not in production]
    -> npx tailwindcss init -p


Project Structure :
    -> Controllers : do actions based on the user requests and sends the responses
    -> Services : serve the things , we gonna use in Controllers mostly like registering new details in to data base or getting data from data base etc
    -> Routes : helps in defining the end points where the request should go
    -> Models : helps in defining the structure of the data stored in the data base
where the above 4 are the mostly used folders , but there are few folders used often in big projects
    -> Middleware
    -> Config
    -> Utils

Basically we use these many folders for better reusability and flexibility

we have created a dabase called final_year_application with a collection called main
where we are going to use only one collection for the whole application
